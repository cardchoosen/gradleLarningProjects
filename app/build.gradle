plugins {
    alias(libs.plugins.android.application)
    alias(libs.plugins.jetbrains.kotlin.android)
}

apply from: '../script.gradle'
apply plugin: MyPlugin

android {
    namespace 'com.example.gradlelearningproject'
    compileSdk Integer.parseInt(COMPILE_SDK_VERSION)

    defaultConfig {
        applicationId "com.example.gradlelearningproject"
        minSdk Integer.parseInt(MIN_SDK_VERSION)
        targetSdk Integer.parseInt(TARGET_SDK_VERSION)
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion '1.5.1'
    }
    packaging {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
}

dependencies {

    implementation libs.androidx.core.ktx
    implementation libs.androidx.lifecycle.runtime.ktx
    implementation libs.androidx.activity.compose
    implementation platform(libs.androidx.compose.bom)
    implementation libs.androidx.ui
    implementation libs.androidx.ui.graphics
    implementation libs.androidx.ui.tooling.preview
    implementation libs.androidx.material3
    testImplementation libs.junit
    androidTestImplementation libs.androidx.junit
    androidTestImplementation libs.androidx.espresso.core
    androidTestImplementation platform(libs.androidx.compose.bom)
    androidTestImplementation libs.androidx.ui.test.junit4
    debugImplementation libs.androidx.ui.tooling
    debugImplementation libs.androidx.ui.test.manifest
}

task deleteZipFolder(type: Delete) {
    // 删除 build 目录下的 outputsZip、outputs 文件夹
    delete "${buildDir}/outputsZip"
}

task outPutsZip(type: Zip) {
    // 压缩build/outputs
    archiveFileName = 'outPutsZip.zip'
    println "outPutsZip println: " + buildDir
    destinationDirectory =  file("${buildDir}/outputsZip")
    from "${buildDir}/outputs"
}

class MyPlugin implements Plugin<Project> {

    @Override
    void apply(Project project) {
        println "MyPlugin apply"

        project.afterEvaluate {
            println "MyPlugin afterEvaluate" + project.tasks.getByName("packageDebug")
            project.task("MyPlugin"){
                println "MyPlugin"
            }
        }
    }
}

